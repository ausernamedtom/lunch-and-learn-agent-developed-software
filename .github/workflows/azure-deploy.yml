#
# NOTE: Every push to the main branch triggers a full build, test, infrastructure deployment, and release to Azure for both backend and frontend.
# To deploy to Azure, simply push to main.
#
# Required secrets: AZURE_CREDENTIALS, AZURE_RG, SQL_ADMIN_PASSWORD
#
# For manual deployment, use the workflow_dispatch trigger in the Actions tab.
#
# For details, see docs/github-actions-deployment.md
#

name: Azure Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'deploy/**'
      - '.github/workflows/azure-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET for API tests
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Run API tests
        run: |
          cd backend/API
          dotnet test --configuration Release
      
      - name: Setup Node.js for Frontend tests
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Run Frontend tests
        run: |
          cd frontend
          npm ci
          npm test -- --watchAll=false
  
  deploy-infrastructure:
    needs: [test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy Azure Infrastructure
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./deploy/main.bicep
          parameters: ./deploy/parameters.${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}.json sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
          failOnStdErr: false

  build-and-deploy-api:
    needs: deploy-infrastructure
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Build and Publish API
        run: |
          cd backend/API
          dotnet restore
          dotnet build --configuration Release
          dotnet publish --configuration Release --output ./publish
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy API to Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: "skillmgmt-${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}-api"
          package: './backend/API/publish'
          
  build-and-deploy-frontend:
    needs: build-and-deploy-api
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build
        env:
          REACT_APP_API_URL: "https://skillmgmt-${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}-api.azurewebsites.net/api"
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy Frontend to Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: "skillmgmt-${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}-web"
          package: './frontend/build'

  deployment-notification:
    needs: build-and-deploy-frontend
    runs-on: ubuntu-latest
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Get deployment URLs
        id: get-urls
        run: |
          echo "API_URL=https://skillmgmt-${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}-api.azurewebsites.net" >> $GITHUB_OUTPUT
          echo "WEB_URL=https://skillmgmt-${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}-web.azurewebsites.net" >> $GITHUB_OUTPUT
      
      - name: Create deployment status comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const environment = "${{ github.event.inputs.environment != '' && github.event.inputs.environment || 'dev' }}";
            const apiUrl = '${{ steps.get-urls.outputs.API_URL }}';
            const webUrl = '${{ steps.get-urls.outputs.WEB_URL }}';
            
            const deployMsg = `ðŸš€ Deployment to **${environment}** successful!\n\n` +
                              `- **Frontend:** [${webUrl}](${webUrl})\n` +
                              `- **API:** [${apiUrl}/swagger](${apiUrl}/swagger)\n\n` +
                              `Deployment completed at \`${new Date().toISOString()}\``;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number || 
                (context.payload.commits ? context.payload.commits[0].id : 'N/A'),
              body: deployMsg
            }).catch(err => {
              // If comment creation fails, just log to console
              console.log('Deployment was successful, but comment creation failed.');
              console.log('Deployment details:');
              console.log(deployMsg);
            });
